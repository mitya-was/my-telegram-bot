/**
 * Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏
 * Contract Management Telegram Bot
 */

const TelegramBot = require('node-telegram-bot-api');
// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ .env —Ñ–∞–π–ª –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è —Ç—É—Ç
const CONFIG = {
    TELEGRAM: {
        BOT_TOKEN: '8391553382:AAGhnyEswcHCVvwxwpBzeQIH58vALOpT1HA',
        CHAT_ID: '156212174', // –í–∞—à Chat ID
    },
    FORM_ID: '1Jy7STz5k4y2tUJ-BG0OIGlP72BWNaeY8HHx8kHc31Qs',
    FORM_URL: 'https://docs.google.com/forms/d/1Jy7STz5k4y2tUJ-BG0OIGlP72BWNaeY8HHx8kHc31Qs/viewform',
    DRIVE_FOLDER_ID: '1uVNZTdCgZAu5q-oc7lAzKvn-FRfkJBx9',
    SPREADSHEET_ID: '1IG8tGF8g8sulW5snTKt_yUXmscUNUkVOQR9_6UO3vlk',
    GOOGLE_SCRIPT_URL: process.env.GOOGLE_SCRIPT_URL || '' // –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –¥–æ–¥–∞—Ç–∏ –ø—ñ—Å–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è Apps Script
};

// –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
const bot = new TelegramBot(CONFIG.TELEGRAM.BOT_TOKEN, {
    polling: {
        interval: 1000,
        autoStart: true,
        params: {
            timeout: 10
        }
    }
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ polling
bot.on('polling_error', (error) => {
    console.log('‚ö†Ô∏è Polling error:', error.message);
    console.log('üîÑ –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');

    setTimeout(() => {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling...');
        bot.stopPolling().then(() => {
            bot.startPolling();
        });
    }, 5000);
});

/**
 * –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞
 */
const mainMenu = {
    reply_markup: {
        keyboard: [
            ['üìã –°–ø–∏—Å–æ–∫ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤', '‚ûï –ù–æ–≤–∏–π –¥–æ–≥–æ–≤—ñ—Ä'],
            ['üí∞ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫', 'üìÑ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∞–∫—Ç'],
            ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    }
};

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
 */
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage = `
ü§ñ –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏.

–©–æ —è –≤–º—ñ—é:
üìã –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤
üí∞ –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä–∞—Ö—É–Ω–∫–∏
üìÑ –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∞–∫—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç
üìä –ù–∞–¥–∞–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚ûï –î–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑ –Ω–æ–≤–∏–º–∏ –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:
  `;

    bot.sendMessage(chatId, welcomeMessage, mainMenu);
});

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
 */
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏
    if (text.startsWith('/')) return;

    try {
        switch (text) {
            case 'üìã –°–ø–∏—Å–æ–∫ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤':
                await showContractsList(chatId);
                break;

            case '‚ûï –ù–æ–≤–∏–π –¥–æ–≥–æ–≤—ñ—Ä':
                await showNewContractForm(chatId);
                break;

            case 'üí∞ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫':
                await showInvoiceGeneration(chatId);
                break;

            case 'üìÑ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∞–∫—Ç':
                await showActGeneration(chatId);
                break;

            case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                await showStatistics(chatId);
                break;

            case '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è':
                await showSettings(chatId);
                break;

            default:
                bot.sendMessage(chatId, '–ù–µ —Ä–æ–∑—É–º—ñ—é –∫–æ–º–∞–Ω–¥—É. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é.', mainMenu);
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
        bot.sendMessage(chatId, '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
});

/**
 * –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤
 */
async function showContractsList(chatId) {
    try {
        // –¢—É—Ç –±—É–¥–µ –∑–∞–ø–∏—Ç –¥–æ Google Sheets –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ–≥–æ–≤–æ—Ä—ñ–≤
        const contracts = await getContractsFromSheets();

        if (contracts.length === 0) {
            bot.sendMessage(chatId, 'üìã –°–ø–∏—Å–æ–∫ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.');
            return;
        }

        let message = 'üìã *–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥–æ–≥–æ–≤–æ—Ä—ñ–≤:*\n\n';

        contracts.slice(0, 10).forEach((contract, index) => {
            message += `${index + 1}. ${contract.number}\n`;
            message += `   üë§ ${contract.client}\n`;
            message += `   üí∞ ${contract.amount} –≥—Ä–Ω\n`;
            message += `   üìÖ ${contract.date}\n\n`;
        });

        if (contracts.length > 10) {
            message += `... —Ç–∞ —â–µ ${contracts.length - 10} –¥–æ–≥–æ–≤–æ—Ä—ñ–≤`;
        }

        // –î–æ–¥–∞—î–º–æ inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥—ñ–π
        const options = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üìÑ –î–µ—Ç–∞–ª—ñ', callback_data: 'contract_details' },
                        { text: 'üí∞ –†–∞—Ö—É–Ω–æ–∫', callback_data: 'generate_invoice' }
                    ],
                    [
                        { text: 'üìù –ê–∫—Ç', callback_data: 'generate_act' },
                        { text: 'üîç –ü–æ—à—É–∫', callback_data: 'search_contract' }
                    ]
                ]
            }
        };

        bot.sendMessage(chatId, message, options);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ–≥–æ–≤–æ—Ä—ñ–≤:', error);
        bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ç–∞–±–ª–∏—Ü—ñ.');
    }
}

/**
 * –§–æ—Ä–º–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä—É
 */
async function showNewContractForm(chatId) {
    const message = `
‚ûï *–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä—É*

–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä—É –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –≤ Google Forms:
${CONFIG.FORM_URL}

üìã –ü–æ–ª—è —Ñ–æ—Ä–º–∏:
‚Ä¢ –ö–ª—ñ—î–Ω—Ç (–Ω–∞–∑–≤–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó)
‚Ä¢ –í–∏–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ  
‚Ä¢ –î–∏—Ä–µ–∫—Ç–æ—Ä/–ö–µ—Ä—ñ–≤–Ω–∏–∫
‚Ä¢ –Ñ–î–†–ü–û–£ –∑–∞–º–æ–≤–Ω–∏–∫–∞
‚Ä¢ –û–ø–∏—Å —Ä–æ–±—ñ—Ç/–ø–æ—Å–ª—É–≥
‚Ä¢ –í–∞—Ä—Ç—ñ—Å—Ç—å (–≤ –≥—Ä–∏–≤–Ω—è—Ö)
‚Ä¢ –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å

–ü—ñ—Å–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –¥–æ–≥–æ–≤—ñ—Ä –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —ñ –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —Ü—å–æ–º—É —á–∞—Ç—ñ.
  `;

    const options = {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{ text: 'üìù –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É', url: CONFIG.FORM_URL }],
                [{ text: 'üìÅ –ü–∞–ø–∫–∞ –∑ –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏', url: `https://drive.google.com/drive/folders/${CONFIG.DRIVE_FOLDER_ID}` }],
                [{ text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
            ]
        }
    };

    bot.sendMessage(chatId, message, options);
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–∞—Ö—É–Ω–∫—É
 */
async function showInvoiceGeneration(chatId) {
    const message = `
üí∞ *–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–∞—Ö—É–Ω–∫—É*

–û–±–µ—Ä—ñ—Ç—å –¥–æ–≥–æ–≤—ñ—Ä –¥–ª—è —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫:
  `;

    try {
        const contracts = await getActiveContracts();

        if (contracts.length === 0) {
            bot.sendMessage(chatId, 'üìã –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–∞—Ö—É–Ω–∫—ñ–≤.');
            return;
        }

        const inlineKeyboard = contracts.slice(0, 5).map(contract => [
            { text: `${contract.number} - ${contract.client}`, callback_data: `invoice_${contract.number}` }
        ]);

        inlineKeyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data: 'back_to_menu' }]);

        const options = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: inlineKeyboard
            }
        };

        bot.sendMessage(chatId, message, options);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–∞—Ö—É–Ω–∫—É:', error);
        bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ–≥–æ–≤–æ—Ä—ñ–≤.');
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–∫—Ç—É –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç
 */
async function showActGeneration(chatId) {
    const message = `
üìÑ *–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–∫—Ç—É –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç*

–û–±–µ—Ä—ñ—Ç—å –¥–æ–≥–æ–≤—ñ—Ä –¥–ª—è —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∞–∫—Ç:
  `;

    try {
        const contracts = await getActiveContracts();

        if (contracts.length === 0) {
            bot.sendMessage(chatId, 'üìã –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–∫—Ç—ñ–≤.');
            return;
        }

        const inlineKeyboard = contracts.slice(0, 5).map(contract => [
            { text: `${contract.number} - ${contract.client}`, callback_data: `act_${contract.number}` }
        ]);

        inlineKeyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data: 'back_to_menu' }]);

        const options = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: inlineKeyboard
            }
        };

        bot.sendMessage(chatId, message, options);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–∫—Ç—É:', error);
        bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ–≥–æ–≤–æ—Ä—ñ–≤.');
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 */
async function showStatistics(chatId) {
    try {
        const stats = await getContractStatistics();

        const message = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤*

üìã –í—Å—å–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤: ${stats.total}
‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö: ${stats.active}
‚úîÔ∏è –í–∏–∫–æ–Ω–∞–Ω–∏—Ö: ${stats.completed}
‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–∏—Ö: ${stats.cancelled}

üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö: ${stats.totalAmount} –≥—Ä–Ω
üìÖ –°–µ—Ä–µ–¥–Ω—ñ–π —Ç–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${stats.avgDuration} –¥–Ω—ñ–≤

üéØ –ó–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å:
   ‚ûï –°—Ç–≤–æ—Ä–µ–Ω–æ: ${stats.thisMonth.created}
   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.thisMonth.completed}
   üí∞ –°—É–º–∞: ${stats.thisMonth.amount} –≥—Ä–Ω
    `;

        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        bot.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
}

/**
 * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
 */
async function showSettings(chatId) {
    const message = `
‚öôÔ∏è *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏*

üîß –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:
‚Ä¢ –ê–≤—Ç–æ—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: ‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ
‚Ä¢ –§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞: W-(YY)-XX
‚Ä¢ –ü–∞–ø–∫–∞ Drive: –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
‚Ä¢ Telegram —á–∞—Ç: ${chatId}

üìù –î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:
  `;

    const options = {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è', callback_data: 'settings_notifications' },
                    { text: 'üìÅ Drive', callback_data: 'settings_drive' }
                ],
                [
                    { text: 'üìä –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö', callback_data: 'export_data' },
                    { text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é', callback_data: 'back_to_menu' }
                ]
            ]
        }
    };

    bot.sendMessage(chatId, message, options);
}

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ callback –∑–∞–ø–∏—Ç—ñ–≤
 */
bot.on('callback_query', async (callbackQuery) => {
    const action = callbackQuery.data;
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;

    try {
        switch (action) {
            case 'back_to_menu':
                bot.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:', mainMenu);
                break;

            case 'contract_details':
                await showContractDetails(chatId);
                break;

            case 'search_contract':
                await startContractSearch(chatId);
                break;

            default:
                if (action.startsWith('invoice_')) {
                    const contractNumber = action.replace('invoice_', '');
                    await generateInvoiceForContract(chatId, contractNumber);
                } else if (action.startsWith('act_')) {
                    const contractNumber = action.replace('act_', '');
                    await generateActForContract(chatId, contractNumber);
                }
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback:', error);
        bot.sendMessage(chatId, '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.');
    }

    // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ callback
    bot.answerCallbackQuery(callbackQuery.id);
});

/**
 * –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Google Sheets API
 */

async function getContractsFromSheets() {
    // –ó–∞–≥–ª—É—à–∫–∞ - —Ç—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –¥–æ Google Sheets
    return [
        {
            number: 'W-24-01',
            client: '–¢–û–í "–ü—Ä–∏–∫–ª–∞–¥"',
            amount: '50000',
            date: '2024-01-15',
            status: '–ê–∫—Ç–∏–≤–Ω–∏–π'
        },
        // ... —ñ–Ω—à—ñ –¥–æ–≥–æ–≤–æ—Ä–∏
    ];
}

async function getActiveContracts() {
    const allContracts = await getContractsFromSheets();
    return allContracts.filter(contract => contract.status === '–ê–∫—Ç–∏–≤–Ω–∏–π');
}

async function getContractStatistics() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    return {
        total: 15,
        active: 8,
        completed: 6,
        cancelled: 1,
        totalAmount: '750000',
        avgDuration: 30,
        thisMonth: {
            created: 3,
            completed: 2,
            amount: '150000'
        }
    };
}

async function generateInvoiceForContract(chatId, contractNumber) {
    bot.sendMessage(chatId, `üí∞ –ì–µ–Ω–µ—Ä—É—é —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä—É ${contractNumber}...`);

    // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–∞—Ö—É–Ω–∫—É —á–µ—Ä–µ–∑ Google Apps Script
    setTimeout(() => {
        bot.sendMessage(chatId, `‚úÖ –†–∞—Ö—É–Ω–æ–∫ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä—É ${contractNumber} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! –î–æ–∫—É–º–µ–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Google Drive.`);
    }, 2000);
}

async function generateActForContract(chatId, contractNumber) {
    bot.sendMessage(chatId, `üìÑ –ì–µ–Ω–µ—Ä—É—é –∞–∫—Ç –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä—É ${contractNumber}...`);

    // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–∫—Ç—É —á–µ—Ä–µ–∑ Google Apps Script
    setTimeout(() => {
        bot.sendMessage(chatId, `‚úÖ –ê–∫—Ç –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä—É ${contractNumber} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ! –î–æ–∫—É–º–µ–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Google Drive.`);
    }, 2000);
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –Ω–æ–≤—ñ –¥–æ–≥–æ–≤–æ—Ä–∏
 */
function sendNewContractNotification(contractData) {
    const message = `
üéâ *–ù–æ–≤–∏–π –¥–æ–≥–æ–≤—ñ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ!*

üìã –ù–æ–º–µ—Ä: ${contractData.number}
üè¢ –ö–ª—ñ—î–Ω—Ç: ${contractData.client}
üí∞ –°—É–º–∞: ${contractData.amount} –≥—Ä–Ω
üë§ –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: ${contractData.performer}

üìÑ [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç](${contractData.documentUrl})
üìÅ [–í—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–ø–∫—É](${contractData.folderUrl})
  `;

    const options = {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üí∞ –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫', callback_data: `invoice_${contractData.number}` },
                    { text: 'üìÑ –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫—Ç', callback_data: `act_${contractData.number}` }
                ]
            ]
        }
    };

    bot.sendMessage(CONFIG.TELEGRAM.CHAT_ID, message, options);
}

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
    bot,
    sendNewContractNotification
};

console.log('ü§ñ Telegram Bot –∑–∞–ø—É—â–µ–Ω–æ!');