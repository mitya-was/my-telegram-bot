/**
 * –û–¢–õ–ê–î–û–ß–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–û–í–û–ô –°–¢–†–£–ö–¢–£–†–´ –§–û–†–ú–´
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–æ–π
 */

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (–ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê)
 */
function debugLastFormDataNew() {
  Logger.log('=== –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ò–• –§–û–†–ú–ò (–ù–û–í–ê –°–¢–†–£–ö–¢–£–†–ê) ===');
  
  try {
    const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getSheetByName(CONFIG.SHEETS.CONTRACTS);
    
    if (!sheet) {
      Logger.log('‚ùå –¢–∞–±–ª–∏—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!');
      return;
    }
    
    const lastRow = sheet.getLastRow();
    Logger.log('–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫:', lastRow);
    
    if (lastRow <= 1) {
      Logger.log('‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—ñ');
      return;
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    Logger.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ:', headers);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–∞–Ω–∏—Ö
    const lastRowData = sheet.getRange(lastRow, 1, 1, sheet.getLastColumn()).getValues()[0];
    Logger.log('–û—Å—Ç–∞–Ω–Ω—ñ –¥–∞–Ω—ñ:', lastRowData);
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
    Logger.log('=== –í–Ü–î–ü–û–í–Ü–î–ù–Ü–°–¢–¨ –ó–ê–ì–û–õ–û–í–ö–Ü–í –¢–ê –î–ê–ù–ò–• (–ù–û–í–ê –°–¢–†–£–ö–¢–£–†–ê) ===');
    
    const expectedStructure = [
      'A: –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É (–≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è)',
      'B: –ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó –∑–∞–º–æ–≤–Ω–∏–∫–∞',
      'C: –¢–∏–ø –æ–ø–æ–¥–∞—Ç–∫—É–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–Ω–∏–∫–∞', 
      'D: –ü–Ü–ë –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞/–ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫–∞',
      'E: –ê–¥—Ä–µ—Å–∞ –∑–∞–º–æ–≤–Ω–∏–∫–∞',
      'F: –Ñ–î–†–ü–û–£ –∑–∞–º–æ–≤–Ω–∏–∫–∞',
      'G: –ë–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–º–æ–≤–Ω–∏–∫–∞',
      'H: –ù–∞–∑–≤–∞ –±–∞–Ω–∫—É –∑–∞–º–æ–≤–Ω–∏–∫–∞',
      'I: –ú–§–û –±–∞–Ω–∫—É –∑–∞–º–æ–≤–Ω–∏–∫–∞',
      'J: –û–ø–∏—Å –ø–æ—Å–ª—É–≥',
      'K: –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä—ñ–æ–¥—É —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è',
      'L: –ö—ñ–Ω–µ—Ü—å –ø–µ—Ä—ñ–æ–¥—É —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è',
      'M: –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞',
      'N: –í–∞–ª—é—Ç–∞',
      'O: –¢–µ—Ä–º—ñ–Ω –æ–ø–ª–∞—Ç–∏',
      'P: –ù–∞–∑–≤–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è',
      'Q: –Ñ–î–†–ü–û–£ –≤–∏–∫–æ–Ω–∞–≤—Ü—è (–∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞)',
      'R: –ê–¥—Ä–µ—Å–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è (–∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞)',
      'S: –¢–∏–ø –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –≤–∏–∫–æ–Ω–∞–≤—Ü—è (–∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞)',
      'T: –¢–µ–ª–µ—Ñ–æ–Ω –≤–∏–∫–æ–Ω–∞–≤—Ü—è (–∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞)',
      'U: –ë–∞–Ω–∫—ñ–≤—Å—å–∫—ñ –≤–∏–∫–æ–Ω–∞–≤—Ü—è (–∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞)',
      'V: –ö–µ—Ä—ñ–≤–Ω–∏–∫ –≤–∏–∫–æ–Ω–∞–≤—Ü—è (–∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞)',
      'W: –î–∞—Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è'
    ];
    
    for (let i = 0; i < Math.max(headers.length, expectedStructure.length); i++) {
      const actual = headers[i] || '–í–Ü–î–°–£–¢–ù–Ñ';
      const expected = expectedStructure[i] || '–ù–ï –û–ß–Ü–ö–£–Ñ–¢–¨–°–Ø';
      const data = lastRowData[i] || '–ø—É—Å—Ç–æ';
      
      Logger.log(`${String.fromCharCode(65 + i)}: "${actual}" | –û—á—ñ–∫—É—î—Ç—å—Å—è: "${expected}" | –î–∞–Ω—ñ: "${data}"`);
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–ª—é—á–æ–≤—ñ –ø–æ–ª—è
    Logger.log('=== –ü–ï–†–ï–í–Ü–†–ö–ê –ö–õ–Æ–ß–û–í–ò–• –ü–û–õ–Ü–í ===');
    const clientName = lastRowData[1]; // B - –ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó
    const amount = lastRowData[12];     // M - –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞  
    const performer = lastRowData[15];  // P - –ù–∞–∑–≤–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    
    Logger.log(`–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó (B): "${clientName}"`);
    Logger.log(`–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ (M): "${amount}"`);
    Logger.log(`–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å (P): "${performer}"`);
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Telegram
    let message = 'üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –§–û–†–ú–ò (–ù–û–í–ê –°–¢–†–£–ö–¢–£–†–ê):\n\n';
    message += `üìä –ö–æ–ª–æ–Ω–æ–∫: ${headers.length}, –†—è–¥–∫—ñ–≤: ${lastRow}\n\n`;
    message += `üîë –ö–õ–Æ–ß–û–í–Ü –ü–û–õ–Ø:\n`;
    message += `‚Ä¢ –ö–æ–º–ø–∞–Ω—ñ—è (B): "${clientName || '–ü–£–°–¢–û'}"\n`;
    message += `‚Ä¢ –°—É–º–∞ (M): "${amount || '–ü–£–°–¢–û'}"\n`;
    message += `‚Ä¢ –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å (P): "${performer || '–ü–£–°–¢–û'}"\n\n`;
    
    if (!clientName || !amount || !performer) {
      message += `‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ –≤—Å—ñ –∫–ª—é—á–æ–≤—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ!\n\n`;
    } else {
      message += `‚úÖ –í—Å—ñ –∫–ª—é—á–æ–≤—ñ –ø–æ–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ\n\n`;
    }
    
    message += `üìã –ü–ï–†–®–Ü 10 –ö–û–õ–û–ù–û–ö:\n`;
    for (let i = 0; i < Math.min(10, headers.length); i++) {
      const letter = String.fromCharCode(65 + i);
      message += `${letter}: "${headers[i]}" = "${lastRowData[i] || '–ø—É—Å—Ç–æ'}"\n`;
    }
    
    sendQuickTelegramMessage(message);
    
    return {
      headers: headers,
      lastRowData: lastRowData,
      keyFields: {
        clientName: clientName,
        amount: amount,
        performer: performer
      }
    };
    
  } catch (error) {
    Logger.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.toString());
    sendQuickTelegramMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ñ–æ—Ä–º–∏:\n${error.toString()}`);
  }
}

/**
 * –°–∏–º—É–ª—è—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ä–º–∏ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ (–ù–û–í–ê –°–¢–†–£–ö–¢–£–†–ê)
 */
function simulateFormSubmissionNew() {
  Logger.log('=== –°–ò–ú–£–õ–Ø–¶–Ü–Ø –û–ë–†–û–ë–ö–ò –§–û–†–ú–ò (–ù–û–í–ê –°–¢–†–£–ö–¢–£–†–ê) ===');
  
  try {
    const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getSheetByName(CONFIG.SHEETS.CONTRACTS);
    const lastRow = sheet.getLastRow();
    
    if (lastRow <= 1) {
      Logger.log('‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó');
      sendQuickTelegramMessage('‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó');
      return;
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–∞–Ω—ñ
    const values = sheet.getRange(lastRow, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ mock event –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó onFormSubmit
    const mockEvent = {
      values: values
    };
    
    Logger.log('–°–∏–º—É–ª—é—î–º–æ onFormSubmit –∑ –¥–∞–Ω–∏–º–∏:', values);
    sendQuickTelegramMessage(`üß™ –°–ò–ú–£–õ–Ø–¶–Ü–Ø: –û–±—Ä–æ–±–ª—è—é –¥–∞–Ω—ñ –∑ —Ä—è–¥–∫–∞ ${lastRow}`);
    
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–±—Ä–æ–±–∫–∏
    onFormSubmit(mockEvent);
    
  } catch (error) {
    Logger.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—ó:', error.toString());
    sendQuickTelegramMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—ó:\n${error.toString()}`);
  }
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —ñ–Ω–¥–µ–∫—Å—ñ–≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ä–µ–∞–ª—å–Ω—ñ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ
 */
function validateConfigMapping() {
  Logger.log('=== –ü–ï–†–ï–í–Ü–†–ö–ê –í–Ü–î–ü–û–í–Ü–î–ù–û–°–¢–Ü –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á ===');
  
  try {
    const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getSheetByName(CONFIG.SHEETS.CONTRACTS);
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    Logger.log('–ü–æ—Ç–æ—á–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
    Logger.log('–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è FORM_FIELDS:', CONFIG.FORM_FIELDS);
    
    let message = 'üîß –ü–ï–†–ï–í–Ü–†–ö–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á:\n\n';
    let hasErrors = false;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –∫–ª—é—á–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    const mappings = [
      { key: 'CLIENT_NAME', index: CONFIG.FORM_FIELDS.CLIENT_NAME, expected: '–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó' },
      { key: 'AMOUNT', index: CONFIG.FORM_FIELDS.AMOUNT, expected: '–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞' },
      { key: 'PERFORMER_NAME', index: CONFIG.FORM_FIELDS.PERFORMER_NAME, expected: '–ù–∞–∑–≤–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è' }
    ];
    
    for (const mapping of mappings) {
      const actualHeader = headers[mapping.index] || '–í–Ü–î–°–£–¢–ù–Ñ';
      const matches = actualHeader.toLowerCase().includes(mapping.expected.toLowerCase());
      
      if (!matches) {
        hasErrors = true;
        message += `‚ùå ${mapping.key} (—ñ–Ω–¥–µ–∫—Å ${mapping.index}): "${actualHeader}" –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î "${mapping.expected}"\n`;
      } else {
        message += `‚úÖ ${mapping.key} (—ñ–Ω–¥–µ–∫—Å ${mapping.index}): "${actualHeader}"\n`;
      }
    }
    
    if (hasErrors) {
      message += '\nüö® –ó–ù–ê–ô–î–ï–ù–û –ü–û–ú–ò–õ–ö–ò –í –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á!';
    } else {
      message += '\n‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞';
    }
    
    sendQuickTelegramMessage(message);
    Logger.log(message);
    
    return !hasErrors;
    
  } catch (error) {
    Logger.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', error.toString());
    sendQuickTelegramMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:\n${error.toString()}`);
    return false;
  }
}

/**
 * –ü–æ–≤–Ω–∏–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
 */
function runFullSystemTestNew() {
  Logger.log('=== –ü–û–í–ù–ò–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–ò (–ù–û–í–ê –°–¢–†–£–ö–¢–£–†–ê) ===');
  
  sendQuickTelegramMessage('üß™ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–≤–Ω–∏–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏...');
  
  // 1. –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–∏—Ö
  Logger.log('1. –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –¥–∞–Ω–∏—Ö...');
  const diagnostics = debugLastFormDataNew();
  
  // 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  Logger.log('2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...');
  const configValid = validateConfigMapping();
  
  // 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤
  Logger.log('3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤...');
  const performers = getActivePerformers();
  Logger.log(`–ó–Ω–∞–π–¥–µ–Ω–æ ${performers.length} –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤`);
  
  // 4. –°–∏–º—É–ª—è—Ü—ñ—è (—è–∫—â–æ —î –¥–∞–Ω—ñ)
  if (diagnostics && diagnostics.keyFields.performer) {
    Logger.log('4. –°–∏–º—É–ª—è—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ä–º–∏...');
    simulateFormSubmissionNew();
  }
  
  sendQuickTelegramMessage(`üèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù–û\n‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: ${configValid ? 'OK' : '–ü–û–ú–ò–õ–ö–ê'}\n‚úÖ –í–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤: ${performers.length}`);
}