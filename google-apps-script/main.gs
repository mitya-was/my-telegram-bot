/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª Google Apps Script –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –¥–æ–≥–æ–≤–æ—Ä—ñ–≤
 * Main Google Apps Script file for contract automation
 */

/**
 * –û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ä–º–∏ - –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–¥—Ö–æ–¥–∂–µ–Ω–Ω—ñ –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
 * Form submission handler
 */
function onFormSubmit(e) {
  Logger.log('=== –ù–û–í–ê –ó–ê–Ø–í–ö–ê –ù–ê –î–û–ì–û–í–Ü–† ===');
  Logger.log('Timestamp:', new Date().toLocaleString());
  Logger.log('Event object —ñ—Å–Ω—É—î:', !!e);
  Logger.log('Event.values —ñ—Å–Ω—É—î:', !!(e && e.values));
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–∞–Ω—ñ –≤ event
    if (!e || !e.values) {
      Logger.log('‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤ event object');
      sendQuickTelegramMessage('‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤ —Ñ–æ—Ä–º—ñ');
      return;
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —Ñ–æ—Ä–º–∏
    const formData = parseFormData(e);
    Logger.log('–î–∞–Ω—ñ —Ñ–æ—Ä–º–∏ –ø—ñ—Å–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É:', JSON.stringify(formData));
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è (–û–ù–û–í–õ–ï–ù–Ü)
    if (!formData.clientName || !formData.amount || !formData.performer) {
      Logger.log('‚ùå –ü–û–ú–ò–õ–ö–ê: –ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è');
      Logger.log('–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó:', formData.clientName);
      Logger.log('–°—É–º–∞:', formData.amount);
      Logger.log('–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å:', formData.performer);
      sendQuickTelegramMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ –ø–æ–ª—è.\n–ö–æ–º–ø–∞–Ω—ñ—è: ${formData.clientName}\n–°—É–º–∞: ${formData.amount}\n–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: ${formData.performer}`);
      return;
    }
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É
    Logger.log('–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä—É...');
    const contractNumber = generateContractNumber();
    formData.contractNumber = contractNumber;
    Logger.log('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É:', contractNumber);
    
    // –û–ù–û–í–õ–Æ–Ñ–ú–û –û–°–¢–ê–ù–ù–Æ –°–¢–†–û–ö–£ –∑–∞–º—ñ—Å—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó
    Logger.log('–û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç—Ä–æ–∫–∏ –∑ –Ω–æ–º–µ—Ä–æ–º –¥–æ–≥–æ–≤–æ—Ä—É...');
    updateLastRowWithContractData(formData);
    Logger.log('–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ');
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    Logger.log('–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏...');
    const folderUrl = createFolderStructure(formData);
    Logger.log('–ü–∞–ø–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞:', folderUrl);
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–æ–≥–æ–≤—ñ—Ä
    Logger.log('–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–æ–≥–æ–≤–æ—Ä—É...');
    const contractUrl = generateContract(formData, folderUrl);
    Logger.log('–î–æ–≥–æ–≤—ñ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ:', contractUrl);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
    Logger.log('–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏...');
    updateSpreadsheetWithLinks(formData.contractNumber, folderUrl, contractUrl);
    Logger.log('–¢–∞–±–ª–∏—Ü—è –æ–Ω–æ–≤–ª–µ–Ω–∞ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏');
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ Telegram
    Logger.log('–í—ñ–¥–ø—Ä–∞–≤–∫–∞ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è...');
    sendTelegramNotification(formData, contractUrl);
    Logger.log('Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
    
    Logger.log('üéâ –î–û–ì–û–í–Ü–† –£–°–ü–Ü–®–ù–û –°–¢–í–û–†–ï–ù–û:', contractNumber);
    
  } catch (error) {
    Logger.log('‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –≤ onFormSubmit:', error.toString());
    Logger.log('Stack trace:', error.stack);
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    const errorMessage = `‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –¥–æ–≥–æ–≤–æ—Ä—É:

${error.toString()}

–ß–∞—Å: ${new Date().toLocaleString()}`;
    
    sendQuickTelegramMessage(errorMessage);
    sendErrorNotification(error);
  }
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–∏—Ö –∑ —Ñ–æ—Ä–º–∏ (–û–ù–û–í–õ–ï–ù–ê –°–¢–†–£–ö–¢–£–†–ê)
 */
function parseFormData(e) {
  Logger.log('=== –ü–ê–†–°–ò–ù–ì –î–ê–ù–ò–• –§–û–†–ú–ò (–ù–û–í–ê –°–¢–†–£–ö–¢–£–†–ê) ===');
  
  if (!e || !e.values) {
    Logger.log('‚ùå –ù–µ–º–∞—î e.values');
    return {};
  }
  
  const values = e.values;
  Logger.log('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞—á–µ–Ω—å:', values.length);
  Logger.log('–í—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:', JSON.stringify(values));
  
  // –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
  const result = {
    timestamp: values[CONFIG.FORM_FIELDS.TIMESTAMP] || new Date(),
    clientName: values[CONFIG.FORM_FIELDS.CLIENT_NAME] || '',
    clientTaxType: values[CONFIG.FORM_FIELDS.CLIENT_TAX_TYPE] || '',
    clientDirector: values[CONFIG.FORM_FIELDS.CLIENT_DIRECTOR] || '',
    clientAddress: values[CONFIG.FORM_FIELDS.CLIENT_ADDRESS] || '',
    clientEdrpou: values[CONFIG.FORM_FIELDS.CLIENT_EDRPOU] || '',
    clientBankAccount: values[CONFIG.FORM_FIELDS.CLIENT_BANK_ACCOUNT] || '',
    clientBankName: values[CONFIG.FORM_FIELDS.CLIENT_BANK_NAME] || '',
    clientBankMfo: values[CONFIG.FORM_FIELDS.CLIENT_BANK_MFO] || '',
    description: values[CONFIG.FORM_FIELDS.DESCRIPTION] || '',
    periodStart: values[CONFIG.FORM_FIELDS.PERIOD_START] || '',
    periodEnd: values[CONFIG.FORM_FIELDS.PERIOD_END] || '',
    amount: values[CONFIG.FORM_FIELDS.AMOUNT] || '',
    currency: values[CONFIG.FORM_FIELDS.CURRENCY] || '–≥—Ä–Ω',
    paymentTerm: values[CONFIG.FORM_FIELDS.PAYMENT_TERM] || '',
    performer: values[CONFIG.FORM_FIELDS.PERFORMER] || ''
  };
  
  Logger.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥—É:', JSON.stringify(result));
  return result;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä—É
 * –§–æ—Ä–º–∞—Ç: W-(YY)-XX
 */
function generateContractNumber() {
  const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getSheetByName(CONFIG.SHEETS.CONTRACTS);
  const currentYear = new Date().getFullYear().toString().slice(-2); // –û—Å—Ç–∞–Ω–Ω—ñ 2 —Ü–∏—Ñ—Ä–∏ —Ä–æ–∫—É
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –Ω–æ–º–µ—Ä –∑–∞ —Ü–µ–π —Ä—ñ–∫
  const lastRow = sheet.getLastRow();
  let sequenceNumber = 1;
  
  if (lastRow > 1) {
    // –®—É–∫–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–æ–≥–æ–≤—ñ—Ä —Ü—å–æ–≥–æ —Ä–æ–∫—É
    const numbers = sheet.getRange(2, 1, lastRow - 1, 1).getValues().flat();
    const thisYearNumbers = numbers
      .filter(num => num && num.toString().includes(`W-${currentYear}-`))
      .map(num => {
        const parts = num.toString().split('-');
        return parts.length === 3 ? parseInt(parts[2]) : 0;
      })
      .filter(num => !isNaN(num) && num > 0);
    
    if (thisYearNumbers.length > 0) {
      sequenceNumber = Math.max(...thisYearNumbers) + 1;
    }
  }
  
  // –§–æ—Ä–º–∞—Ç—É—î–º–æ –Ω–æ–º–µ—Ä –∑ –ø—Ä–æ–≤—ñ–¥–Ω–∏–º–∏ –Ω—É–ª—è–º–∏
  const formattedNumber = sequenceNumber.toString().padStart(2, '0');
  
  return `${CONFIG.CONTRACT_NUMBER_FORMAT.PREFIX}${CONFIG.CONTRACT_NUMBER_FORMAT.SEPARATOR}${currentYear}${CONFIG.CONTRACT_NUMBER_FORMAT.SEPARATOR}${formattedNumber}`;
}

/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å—Ç—Ä–æ–∫–∏ –∑ –¥–∞–Ω–∏–º–∏ –¥–æ–≥–æ–≤–æ—Ä—É (–∑–∞–º—ñ—Å—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó)
 */
function updateLastRowWithContractData(formData) {
  Logger.log('=== –û–ù–û–í–õ–ï–ù–ù–Ø –û–°–¢–ê–ù–ù–¨–û–á –°–¢–†–û–ö–ò ===');
  
  const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getSheetByName(CONFIG.SHEETS.CONTRACTS);
  const lastRow = sheet.getLastRow();
  
  Logger.log('–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫:', lastRow);
  
  if (lastRow <= 1) {
    Logger.log('‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è, –¥–æ–¥–∞—î–º–æ –Ω–æ–≤—É —Å—Ç—Ä–æ–∫—É');
    addToSpreadsheet(formData);
    return;
  }
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≤–∏–∫–æ–Ω–∞–≤—Ü—è –∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞
  const performerData = getPerformerData(formData.performer);
  Logger.log('–î–∞–Ω—ñ –≤–∏–∫–æ–Ω–∞–≤—Ü—è:', performerData);
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ –≤ –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É —Ä—è–¥–∫—É
  try {
    // –ö–æ–ª–æ–Ω–∫–∞ A - –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É
    sheet.getRange(lastRow, 1).setValue(formData.contractNumber);
    
    // –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –≤–∏–∫–æ–Ω–∞–≤—Ü—è (—è–∫—â–æ —î –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –Ω–∏—Ö)
    const totalColumns = sheet.getLastColumn();
    Logger.log('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫:', totalColumns);
    
    if (totalColumns >= 10) {
      sheet.getRange(lastRow, 10).setValue(performerData.fullName || ''); // J - –ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    }
    if (totalColumns >= 11) {
      sheet.getRange(lastRow, 11).setValue(performerData.edrpou || '');    // K - –Ñ–î–†–ü–û–£ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    }
    if (totalColumns >= 12) {
      sheet.getRange(lastRow, 12).setValue(performerData.address || '');  // L - –ê–¥—Ä–µ—Å–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    }
    if (totalColumns >= 13) {
      sheet.getRange(lastRow, 13).setValue(performerData.type || '');     // M - –¢–∏–ø –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó
    }
    if (totalColumns >= 14) {
      sheet.getRange(lastRow, 14).setValue(performerData.phone || '');    // N - –¢–µ–ª–µ—Ñ–æ–Ω
    }
    if (totalColumns >= 15) {
      sheet.getRange(lastRow, 15).setValue(performerData.email || '');    // O - Email
    }
    if (totalColumns >= 16) {
      sheet.getRange(lastRow, 16).setValue(performerData.bankDetails || ''); // P - –ë–∞–Ω–∫—ñ–≤—Å—å–∫—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏
    }
    if (totalColumns >= 17) {
      sheet.getRange(lastRow, 17).setValue(performerData.director || ''); // Q - –ö–µ—Ä—ñ–≤–Ω–∏–∫ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    }
    if (totalColumns >= 18) {
      sheet.getRange(lastRow, 18).setValue(CONFIG.CONTRACT_STATUS.DRAFT); // R - –°—Ç–∞—Ç—É—Å
    }
    if (totalColumns >= 21) {
      sheet.getRange(lastRow, 21).setValue(new Date()); // U - –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    }
    
    Logger.log('‚úÖ –û—Å—Ç–∞–Ω–Ω—é —Å—Ç—Ä–æ–∫—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ');
    
  } catch (error) {
    Logger.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä–æ–∫–∏:', error.toString());
    throw error;
  }
}

/**
 * –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–æ Google Sheets (—Ä–µ–∑–µ—Ä–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è)
 */
function addToSpreadsheet(formData) {
  const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getSheetByName(CONFIG.SHEETS.CONTRACTS);
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≤–∏–∫–æ–Ω–∞–≤—Ü—è –∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞
  const performerData = getPerformerData(formData.performer);
  
  const rowData = [
    formData.contractNumber,        // A - –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É
    formData.timestamp,             // B - Timestamp
    formData.client,                // C - –ö–ª—ñ—î–Ω—Ç
    formData.activityType,          // D - –í–∏–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ
    formData.director,              // E - –î–∏—Ä–µ–∫—Ç–æ—Ä/–ö–µ—Ä—ñ–≤–Ω–∏–∫
    formData.edrpou,                // F - –Ñ–î–†–ü–û–£ –∑–∞–º–æ–≤–Ω–∏–∫–∞
    formData.description,           // G - –û–ø–∏—Å
    formData.amount,                // H - –í–∞—Ä—Ç—ñ—Å—Ç—å
    formData.performer,             // I - –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å (–Ω–∞–∑–≤–∞)
    performerData.fullName || '',   // J - –ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    performerData.edrpou || '',     // K - –Ñ–î–†–ü–û–£ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    performerData.address || '',    // L - –ê–¥—Ä–µ—Å–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    performerData.type || '',       // M - –¢–∏–ø –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    performerData.phone || '',      // N - –¢–µ–ª–µ—Ñ–æ–Ω –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    performerData.email || '',      // O - Email –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    performerData.bankDetails || '', // P - –ë–∞–Ω–∫—ñ–≤—Å—å–∫—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏
    performerData.director || '',   // Q - –ö–µ—Ä—ñ–≤–Ω–∏–∫ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    CONFIG.CONTRACT_STATUS.DRAFT,   // R - –°—Ç–∞—Ç—É—Å
    '',                             // S - –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞–ø–∫—É
    '',                             // T - –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–≥–æ–≤—ñ—Ä
    new Date()                      // U - –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
  ];
  
  sheet.appendRow(rowData);
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤–∏–∫–æ–Ω–∞–≤—Ü—è –∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞
 */
function getPerformerData(performerName) {
  try {
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ performers-management.gs
    const performer = getPerformerByName(performerName);
    
    if (performer) {
      return {
        fullName: performer.fullName,
        edrpou: performer.edrpou,
        address: performer.address,
        type: performer.type,
        phone: performer.phone,
        email: performer.email,
        bankDetails: performer.bankDetails,
        director: performer.director
      };
    }
  } catch (error) {
    Logger.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤–∏–∫–æ–Ω–∞–≤—Ü—è:', error.toString());
  }
  
  return {}; // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
}

/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø–∞–ø–æ–∫ –≤ Google Drive
 */
function createFolderStructure(formData) {
  const parentFolder = DriveApp.getFolderById(CONFIG.DRIVE_FOLDER_ID);
  
  // –ù–∞–∑–≤–∞ –ø–∞–ø–∫–∏: –Ω–æ–º–µ—Ä_–ù–∞–∑–≤–∞–ö–ª—ñ—î–Ω—Ç–∞
  const folderName = `${formData.contractNumber}_${formData.client}`;
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —ñ—Å–Ω—É—î –≤–∂–µ —Ç–∞–∫–∞ –ø–∞–ø–∫–∞
  const existingFolders = parentFolder.getFoldersByName(folderName);
  if (existingFolders.hasNext()) {
    return existingFolders.next().getUrl();
  }
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –ø–∞–ø–∫—É
  const newFolder = parentFolder.createFolder(folderName);
  
  return newFolder.getUrl();
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–æ–≥–æ–≤–æ—Ä—É –∑ —à–∞–±–ª–æ–Ω—É
 */
function generateContract(formData, folderUrl) {
  Logger.log('=== –ì–ï–ù–ï–†–ê–¶–Ü–Ø –î–û–ì–û–í–û–†–£ ===');
  Logger.log('formData:', JSON.stringify(formData));
  Logger.log('folderUrl:', folderUrl);
  
  try {
    // –ö–æ–ø—ñ—é—î–º–æ —à–∞–±–ª–æ–Ω
    Logger.log('–ö—Ä–æ–∫ 1: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—É...');
    Logger.log('Template ID:', CONFIG.TEMPLATES.CONTRACT);
    const template = DriveApp.getFileById(CONFIG.TEMPLATES.CONTRACT);
    Logger.log('‚úÖ –®–∞–±–ª–æ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ:', template.getName());
    
    Logger.log('–ö—Ä–æ–∫ 2: –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞–ø–∫–∏...');
    const folderId = extractFolderIdFromUrl(folderUrl);
    Logger.log('Folder ID:', folderId);
    const folder = DriveApp.getFolderById(folderId);
    Logger.log('‚úÖ –ü–∞–ø–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞:', folder.getName());
    
    Logger.log('–ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ø—ñ—ó...');
    const fileName = `–î–æ–≥–æ–≤—ñ—Ä_${formData.contractNumber}_${formData.client}`;
    Logger.log('–ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É:', fileName);
    const contractCopy = template.makeCopy(fileName, folder);
    Logger.log('‚úÖ –ö–æ–ø—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞, ID:', contractCopy.getId());
  
    Logger.log('–ö—Ä–æ–∫ 4: –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è...');
    
    // –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó Google Drive
    Logger.log('–ß–µ–∫–∞—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é Google Drive (3 —Å–µ–∫—É–Ω–¥–∏)...');
    Utilities.sleep(3000);
    
    // –ü—Ä–æ–±—É—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∑ retry –ª–æ–≥—ñ–∫–æ—é
    let doc;
    let attempts = 0;
    const maxAttempts = 3;
    
    while (attempts < maxAttempts) {
      try {
        attempts++;
        Logger.log(`–°–ø—Ä–æ–±–∞ ${attempts} –≤—ñ–¥–∫—Ä–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç...`);
        doc = DocumentApp.openById(contractCopy.getId());
        Logger.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –≤—ñ–¥–∫—Ä–∏—Ç–æ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è');
        break;
      } catch (retryError) {
        Logger.log(`‚ùå –°–ø—Ä–æ–±–∞ ${attempts} –Ω–µ–≤–¥–∞–ª–∞: ${retryError.toString()}`);
        if (attempts < maxAttempts) {
          Logger.log('–ß–µ–∫–∞—î–º–æ 2 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...');
          Utilities.sleep(2000);
        } else {
          throw retryError;
        }
      }
    }
    
    const body = doc.getBody();
    Logger.log('‚úÖ Body –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–æ');
  
    Logger.log('–ö—Ä–æ–∫ 5: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–º—ñ–Ω–∏ —Ç–µ–∫—Å—Ç—É...');
    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    const performerData = getPerformerData(formData.performer);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—É–º—É –≤ —Å–ª–æ–≤–∞
    const amountNumber = parseFloat(formData.amount) || 0;
    const amountWords = amountToWords(amountNumber);
    
    // –ó–∞–º—ñ–Ω—é—î–º–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
    const replacements = {
      '{{CONTRACT_NUMBER}}': formData.contractNumber,
      '{{CLIENT_NAME}}': formData.client,
      '{{ACTIVITY_TYPE}}': formData.activityType,
      '{{DIRECTOR_NAME}}': formData.director,
      '{{CLIENT_EDRPOU}}': formData.edrpou,
      '{{DESCRIPTION}}': formData.description,
      '{{AMOUNT}}': formData.amount,
      '{{AMOUNT_WORDS}}': amountWords,
      '{{PERFORMER}}': formData.performer,
      '{{PERFORMER_FULL_NAME}}': performerData.fullName || formData.performer,
      '{{PERFORMER_EDRPOU}}': performerData.edrpou || '',
      '{{PERFORMER_ADDRESS}}': performerData.address || '',
      '{{PERFORMER_TYPE}}': performerData.type || '',
      '{{PERFORMER_PHONE}}': performerData.phone || '',
      '{{PERFORMER_EMAIL}}': performerData.email || '',
      '{{PERFORMER_BANK_DETAILS}}': performerData.bankDetails || '',
      '{{PERFORMER_DIRECTOR}}': performerData.director || '',
      '{{DATE}}': Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'dd.MM.yyyy'),
      '{{YEAR}}': new Date().getFullYear().toString()
    };
    
    Logger.log('Replacements:', JSON.stringify(replacements));
    
    Logger.log('–ö—Ä–æ–∫ 6: –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–º—ñ–Ω...');
    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–º—ñ–Ω–∏
    for (const [placeholder, value] of Object.entries(replacements)) {
      Logger.log(`–ó–∞–º—ñ–Ω–∞ ${placeholder} ‚Üí ${value}`);
      body.replaceText(placeholder, value || '');
    }
    Logger.log('‚úÖ –í—Å—ñ –∑–∞–º—ñ–Ω–∏ –≤–∏–∫–æ–Ω–∞–Ω–æ');
    
    Logger.log('–ö—Ä–æ–∫ 7: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
    doc.saveAndClose();
    Logger.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
    
    const documentUrl = contractCopy.getUrl();
    Logger.log('‚úÖ URL –¥–æ–∫—É–º–µ–Ω—Ç–∞:', documentUrl);
    Logger.log('üéâ –ì–ï–ù–ï–†–ê–¶–Ü–Ø –î–û–ì–û–í–û–†–£ –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–Ü–®–ù–û');
    
    return documentUrl;
    
  } catch (error) {
    Logger.log('‚ùå –ü–û–ú–ò–õ–ö–ê –í –ì–ï–ù–ï–†–ê–¶–Ü–á –î–û–ì–û–í–û–†–£:', error.toString());
    Logger.log('Stack trace:', error.stack);
    throw error;
  }
}

/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
 */
function updateSpreadsheetWithLinks(contractNumber, folderUrl, contractUrl) {
  Logger.log('=== –û–ù–û–í–õ–ï–ù–ù–Ø –ü–û–°–ò–õ–ê–ù–¨ ===');
  Logger.log('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É:', contractNumber);
  
  const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getSheetByName(CONFIG.SHEETS.CONTRACTS);
  const lastRow = sheet.getLastRow();
  const totalColumns = sheet.getLastColumn();
  
  Logger.log('–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫:', lastRow);
  Logger.log('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫:', totalColumns);
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ (—è–∫–∏–π —â–æ–π–Ω–æ –±—É–≤ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –∑ –Ω–æ–º–µ—Ä–æ–º –¥–æ–≥–æ–≤–æ—Ä—É)
  try {
    if (totalColumns >= 19) {
      sheet.getRange(lastRow, 19).setValue(folderUrl); // –ö–æ–ª–æ–Ω–∫–∞ S - –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞–ø–∫—É
      Logger.log('‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞–ø–∫—É –¥–æ–¥–∞–Ω–æ');
    }
    if (totalColumns >= 20) {
      sheet.getRange(lastRow, 20).setValue(contractUrl); // –ö–æ–ª–æ–Ω–∫–∞ T - –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–≥–æ–≤—ñ—Ä
      Logger.log('‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–≥–æ–≤—ñ—Ä –¥–æ–¥–∞–Ω–æ');
    }
    if (totalColumns >= 18) {
      sheet.getRange(lastRow, 18).setValue(CONFIG.CONTRACT_STATUS.ACTIVE); // –ö–æ–ª–æ–Ω–∫–∞ R - –°—Ç–∞—Ç—É—Å
      Logger.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –ê–ö–¢–ò–í–ù–ò–ô');
    }
    
    Logger.log('‚úÖ –í—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ');
    
  } catch (error) {
    Logger.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å:', error.toString());
    
    // –†–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥ - —à—É–∫–∞—î–º–æ –ø–æ –Ω–æ–º–µ—Ä—É –¥–æ–≥–æ–≤–æ—Ä—É
    Logger.log('–ü—Ä–æ–±—É—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ—à—É–∫—É...');
    const data = sheet.getDataRange().getValues();
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === contractNumber) {
        Logger.log(`–ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–≥–æ–≤—ñ—Ä –≤ —Ä—è–¥–∫—É ${i + 1}`);
        
        if (totalColumns >= 19) {
          sheet.getRange(i + 1, 19).setValue(folderUrl);
        }
        if (totalColumns >= 20) {
          sheet.getRange(i + 1, 20).setValue(contractUrl);
        }
        if (totalColumns >= 18) {
          sheet.getRange(i + 1, 18).setValue(CONFIG.CONTRACT_STATUS.ACTIVE);
        }
        
        Logger.log('‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏–º –º–µ—Ç–æ–¥–æ–º');
        break;
      }
    }
  }
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ Telegram
 */
function sendTelegramNotification(formData, contractUrl) {
  if (!CONFIG.TELEGRAM.CHAT_ID) {
    Logger.log('‚ö†Ô∏è Chat ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å');
    return;
  }
  
  const message = `üéâ –ù–æ–≤–∏–π –¥–æ–≥–æ–≤—ñ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ!

üìã –ù–æ–º–µ—Ä: ${formData.contractNumber}
üè¢ –ö–ª—ñ—î–Ω—Ç: ${formData.client}
üí∞ –°—É–º–∞: ${formData.amount} –≥—Ä–Ω
üë§ –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: ${formData.performer}

üìÑ –î–æ–∫—É–º–µ–Ω—Ç: ${contractUrl}

‚è∞ –ß–∞—Å: ${new Date().toLocaleString()}`;
  
  const payload = {
    chat_id: CONFIG.TELEGRAM.CHAT_ID,
    text: message,
    parse_mode: 'HTML'
  };
  
  const options = {
    method: 'POST',
    contentType: 'application/json',
    payload: JSON.stringify(payload)
  };
  
  try {
    Logger.log('–í—ñ–¥–ø—Ä–∞–≤–∫–∞ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è...');
    const response = UrlFetchApp.fetch(`https://api.telegram.org/bot${CONFIG.TELEGRAM.BOT_TOKEN}/sendMessage`, options);
    const result = JSON.parse(response.getContentText());
    
    if (result.ok) {
      Logger.log('‚úÖ Telegram —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
    } else {
      Logger.log('‚ùå –ü–æ–º–∏–ª–∫–∞ Telegram API:', result.description);
    }
    
  } catch (error) {
    Logger.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.toString());
  }
}

/**
 * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
 */
function sendErrorNotification(error) {
  if (!CONFIG.TELEGRAM.CHAT_ID) return;
  
  const message = `‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –¥–æ–≥–æ–≤–æ—Ä—É:

${error.toString()}

‚è∞ –ß–∞—Å: ${new Date().toLocaleString()}`;
  
  const payload = {
    chat_id: CONFIG.TELEGRAM.CHAT_ID,
    text: message
  };
  
  const options = {
    method: 'POST',
    contentType: 'application/json',
    payload: JSON.stringify(payload)
  };
  
  try {
    UrlFetchApp.fetch(`https://api.telegram.org/bot${CONFIG.TELEGRAM.BOT_TOKEN}/sendMessage`, options);
  } catch (e) {
    Logger.log('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–º–∏–ª–∫–∏ –≤ Telegram:', e.toString());
  }
}

/**
 * –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è ID –ø–∞–ø–∫–∏ –∑ URL
 */
function extractFolderIdFromUrl(url) {
  const match = url.match(/\/folders\/([a-zA-Z0-9-_]+)/);
  return match ? match[1] : null;
}

/**
 * –¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–∏
 */
function testSystem() {
  Logger.log('=== –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò ===');
  
  // –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
  const testData = {
    contractNumber: 'TEST-01',
    client: '–¢–µ—Å—Ç–æ–≤–∏–π –ö–ª—ñ—î–Ω—Ç –¢–û–í',
    activityType: 'IT –ø–æ—Å–ª—É–≥–∏',
    director: '–Ü–≤–∞–Ω–µ–Ω–∫–æ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á',
    edrpou: '12345678',
    description: '–†–æ–∑—Ä–æ–±–∫–∞ –≤–µ–±-—Å–∞–π—Ç—É',
    amount: '50000',
    performer: 'IT Company LLC'
  };
  
  try {
    Logger.log('–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏...');
    const folderUrl = createFolderStructure(testData);
    Logger.log('‚úÖ –ü–∞–ø–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞:', folderUrl);
    
    Logger.log('–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–æ–º–µ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä—É...');
    const contractNumber = generateContractNumber();
    Logger.log('‚úÖ –ù–æ–º–µ—Ä –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ:', contractNumber);
    
    Logger.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ!');
    
  } catch (error) {
    Logger.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
  }
}

// –¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞ –¥–ª—è production –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è

/**
 * –®–≤–∏–¥–∫–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è Telegram –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 */
function sendQuickTelegramMessage(text) {
  if (!CONFIG.TELEGRAM.CHAT_ID) {
    Logger.log('‚ùå Chat ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
    return;
  }
  
  const payload = {
    chat_id: CONFIG.TELEGRAM.CHAT_ID,
    text: text
  };
  
  const options = {
    method: 'POST',
    contentType: 'application/json',
    payload: JSON.stringify(payload)
  };
  
  try {
    UrlFetchApp.fetch(`https://api.telegram.org/bot${CONFIG.TELEGRAM.BOT_TOKEN}/sendMessage`, options);
    Logger.log('‚úÖ –®–≤–∏–¥–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
  } catch (error) {
    Logger.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —à–≤–∏–¥–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error.toString());
  }
}

/**
 * –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –≤—Å—ñ—Ö —à–∞–±–ª–æ–Ω—ñ–≤
 */
function testTemplateAccess() {
  Logger.log('=== –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –î–û–°–¢–£–ü–£ –î–û –®–ê–ë–õ–û–ù–Ü–í ===');
  
  const templates = {
    '–î–æ–≥–æ–≤—ñ—Ä': CONFIG.TEMPLATES.CONTRACT,
    '–†–∞—Ö—É–Ω–æ–∫': CONFIG.TEMPLATES.INVOICE, 
    '–ê–∫—Ç': CONFIG.TEMPLATES.ACT
  };
  
  for (const [name, id] of Object.entries(templates)) {
    try {
      Logger.log(`–ü–µ—Ä–µ–≤—ñ—Ä—è—é ${name} (${id})...`);
      const file = DriveApp.getFileById(id);
      Logger.log(`‚úÖ ${name}: ${file.getName()} - –î–û–°–¢–£–ü –Ñ`);
    } catch (error) {
      Logger.log(`‚ùå ${name} (${id}): ${error.toString()}`);
      sendQuickTelegramMessage(`‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —à–∞–±–ª–æ–Ω—É ${name}: ${id}`);
    }
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞–±–ª–∏—Ü—é —Ç–µ–∂
  try {
    Logger.log(`–ü–µ—Ä–µ–≤—ñ—Ä—è—é —Ç–∞–±–ª–∏—Ü—é (${CONFIG.SPREADSHEET_ID})...`);
    const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID);
    Logger.log(`‚úÖ –¢–∞–±–ª–∏—Ü—è: ${sheet.getName()} - –î–û–°–¢–£–ü –Ñ`);
  } catch (error) {
    Logger.log(`‚ùå –¢–∞–±–ª–∏—Ü—è (${CONFIG.SPREADSHEET_ID}): ${error.toString()}`);
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞–ø–∫—É
  try {
    Logger.log(`–ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø–∞–ø–∫—É (${CONFIG.DRIVE_FOLDER_ID})...`);
    const folder = DriveApp.getFolderById(CONFIG.DRIVE_FOLDER_ID);
    Logger.log(`‚úÖ –ü–∞–ø–∫–∞: ${folder.getName()} - –î–û–°–¢–£–ü –Ñ`);
  } catch (error) {
    Logger.log(`‚ùå –ü–∞–ø–∫–∞ (${CONFIG.DRIVE_FOLDER_ID}): ${error.toString()}`);
  }
}

// –í–∏–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏ –∫–æ–¥—É

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —á–∏—Å–ª–∞ –≤ —Å–ª–æ–≤–∞ (—Å—É–º–∞ –ø—Ä–æ–ø–∏—Å–æ–º)
 */
function numberToWords(number) {
  const units = ['', '–æ–¥–∏–Ω', '–¥–≤–∞', '—Ç—Ä–∏', '—á–æ—Ç–∏—Ä–∏', '–ø\'—è—Ç—å', '—à—ñ—Å—Ç—å', '—Å—ñ–º', '–≤—ñ—Å—ñ–º', '–¥–µ–≤\'—è—Ç—å'];
  const teens = ['–¥–µ—Å—è—Ç—å', '–æ–¥–∏–Ω–∞–¥—Ü—è—Ç—å', '–¥–≤–∞–Ω–∞–¥—Ü—è—Ç—å', '—Ç—Ä–∏–Ω–∞–¥—Ü—è—Ç—å', '—á–æ—Ç–∏—Ä–Ω–∞–¥—Ü—è—Ç—å', '–ø\'—è—Ç–Ω–∞–¥—Ü—è—Ç—å', '—à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç—å', '—Å—ñ–º–Ω–∞–¥—Ü—è—Ç—å', '–≤—ñ—Å—ñ–º–Ω–∞–¥—Ü—è—Ç—å', '–¥–µ–≤\'—è—Ç–Ω–∞–¥—Ü—è—Ç—å'];
  const tens = ['', '', '–¥–≤–∞–¥—Ü—è—Ç—å', '—Ç—Ä–∏–¥—Ü—è—Ç—å', '—Å–æ—Ä–æ–∫', '–ø\'—è—Ç–¥–µ—Å—è—Ç', '—à—ñ—Å—Ç–¥–µ—Å—è—Ç', '—Å—ñ–º–¥–µ—Å—è—Ç', '–≤—ñ—Å—ñ–º–¥–µ—Å—è—Ç', '–¥–µ–≤\'—è–Ω–æ—Å—Ç–æ'];
  const hundreds = ['', '—Å—Ç–æ', '–¥–≤—ñ—Å—Ç—ñ', '—Ç—Ä–∏—Å—Ç–∞', '—á–æ—Ç–∏—Ä–∏—Å—Ç–∞', '–ø\'—è—Ç—Å–æ—Ç', '—à—ñ—Å—Ç—Å–æ—Ç', '—Å—ñ–º—Å–æ—Ç', '–≤—ñ—Å—ñ–º—Å–æ—Ç', '–¥–µ–≤\'—è—Ç—Å–æ—Ç'];
  
  const thousandsNames = ['', '—Ç–∏—Å—è—á–∞', '—Ç–∏—Å—è—á—ñ', '—Ç–∏—Å—è—á'];
  const millionsNames = ['', '–º—ñ–ª—å–π–æ–Ω', '–º—ñ–ª—å–π–æ–Ω–∏', '–º—ñ–ª—å–π–æ–Ω—ñ–≤'];
  
  function convertGroup(num, group) {
    if (num === 0) return '';
    
    let result = '';
    
    // –°–æ—Ç–Ω—ñ
    if (num >= 100) {
      result += hundreds[Math.floor(num / 100)] + ' ';
      num %= 100;
    }
    
    // –î–µ—Å—è—Ç–∫–∏ —Ç–∞ –æ–¥–∏–Ω–∏—Ü—ñ
    if (num >= 20) {
      result += tens[Math.floor(num / 10)] + ' ';
      num %= 10;
      if (num > 0) {
        result += units[num] + ' ';
      }
    } else if (num >= 10) {
      result += teens[num - 10] + ' ';
    } else if (num > 0) {
      result += units[num] + ' ';
    }
    
    // –î–æ–¥–∞—î–º–æ –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏
    if (group === 'thousands') {
      if (num === 1) result += thousandsNames[1] + ' ';
      else if (num >= 2 && num <= 4) result += thousandsNames[2] + ' ';
      else result += thousandsNames[3] + ' ';
    } else if (group === 'millions') {
      if (num === 1) result += millionsNames[1] + ' ';
      else if (num >= 2 && num <= 4) result += millionsNames[2] + ' ';
      else result += millionsNames[3] + ' ';
    }
    
    return result;
  }
  
  // –†–æ–∑–±–∏–≤–∞—î–º–æ —á–∏—Å–ª–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
  const millionsPart = Math.floor(number / 1000000);
  const thousandsPart = Math.floor((number % 1000000) / 1000);
  const remainder = number % 1000;
  
  let result = '';
  
  if (millionsPart > 0) {
    result += convertGroup(millionsPart, 'millions');
  }
  
  if (thousandsPart > 0) {
    result += convertGroup(thousandsPart, 'thousands');
  }
  
  if (remainder > 0) {
    result += convertGroup(remainder, '');
  }
  
  return result.trim();
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Å—É–º–∏ –≤ –≥—Ä–∏–≤–Ω—ñ –ø—Ä–æ–ø–∏—Å–æ–º
 */
function amountToWords(amount) {
  if (amount === 0) return '–Ω—É–ª—å –≥—Ä–∏–≤–µ–Ω—å';
  
  const integerPart = Math.floor(amount);
  const decimalPart = Math.round((amount - integerPart) * 100);
  
  let result = numberToWords(integerPart);
  
  // –î–æ–¥–∞—î–º–æ "–≥—Ä–∏–≤–µ–Ω—å/–≥—Ä–∏–≤–Ω—ñ/–≥—Ä–∏–≤–Ω—è"
  const lastDigit = integerPart % 10;
  const lastTwoDigits = integerPart % 100;
  
  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {
    result += ' –≥—Ä–∏–≤–µ–Ω—å';
  } else if (lastDigit === 1) {
    result += ' –≥—Ä–∏–≤–Ω—è';
  } else if (lastDigit >= 2 && lastDigit <= 4) {
    result += ' –≥—Ä–∏–≤–Ω—ñ';
  } else {
    result += ' –≥—Ä–∏–≤–µ–Ω—å';
  }
  
  // –î–æ–¥–∞—î–º–æ –∫–æ–ø—ñ–π–∫–∏
  if (decimalPart > 0) {
    result += ' ' + numberToWords(decimalPart);
    
    const lastDigitKop = decimalPart % 10;
    const lastTwoDigitsKop = decimalPart % 100;
    
    if (lastTwoDigitsKop >= 11 && lastTwoDigitsKop <= 19) {
      result += ' –∫–æ–ø—ñ–π–æ–∫';
    } else if (lastDigitKop === 1) {
      result += ' –∫–æ–ø—ñ–π–∫–∞';
    } else if (lastDigitKop >= 2 && lastDigitKop <= 4) {
      result += ' –∫–æ–ø—ñ–π–∫–∏';
    } else {
      result += ' –∫–æ–ø—ñ–π–æ–∫';
    }
  }
  
  return result;
}

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤
 */
function initializeContractsSheet() {
  Logger.log('=== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ó–ê–ì–û–õ–û–í–ö–Ü–í –¢–ê–ë–õ–ò–¶–Ü –î–û–ì–û–í–û–†–Ü–í ===');
  
  try {
    const spreadsheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID);
    const contractsSheet = spreadsheet.getSheetByName(CONFIG.SHEETS.CONTRACTS);
    
    if (contractsSheet === null) {
      Logger.log('‚ùå –í–∫–ª–∞–¥–∫–∞ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
      throw new Error('–í–∫–ª–∞–¥–∫–∞ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    const headers = [
      '–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É',
      'Timestamp',
      '–ö–ª—ñ—î–Ω—Ç',
      '–í–∏–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ',
      '–î–∏—Ä–µ–∫—Ç–æ—Ä/–ö–µ—Ä—ñ–≤–Ω–∏–∫',
      '–Ñ–î–†–ü–û–£ –∑–∞–º–æ–≤–Ω–∏–∫–∞',
      '–û–ø–∏—Å',
      '–í–∞—Ä—Ç—ñ—Å—Ç—å',
      '–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å',
      '–ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è',
      '–Ñ–î–†–ü–û–£ –≤–∏–∫–æ–Ω–∞–≤—Ü—è',
      '–ê–¥—Ä–µ—Å–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è',
      '–¢–∏–ø –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –≤–∏–∫–æ–Ω–∞–≤—Ü—è',
      '–¢–µ–ª–µ—Ñ–æ–Ω –≤–∏–∫–æ–Ω–∞–≤—Ü—è',
      'Email –≤–∏–∫–æ–Ω–∞–≤—Ü—è',
      '–ë–∞–Ω–∫—ñ–≤—Å—å–∫—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏',
      '–ö–µ—Ä—ñ–≤–Ω–∏–∫ –≤–∏–∫–æ–Ω–∞–≤—Ü—è',
      '–°—Ç–∞—Ç—É—Å',
      '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞–ø–∫—É',
      '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–≥–æ–≤—ñ—Ä',
      '–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è'
    ];
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    contractsSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    
    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
    const headerRange = contractsSheet.getRange(1, 1, 1, headers.length);
    headerRange.setFontWeight('bold');
    headerRange.setBackground('#34a853');
    headerRange.setFontColor('white');
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
    contractsSheet.setColumnWidth(1, 150);  // –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä—É
    contractsSheet.setColumnWidth(2, 150);  // Timestamp
    contractsSheet.setColumnWidth(3, 250);  // –ö–ª—ñ—î–Ω—Ç
    contractsSheet.setColumnWidth(4, 200);  // –í–∏–¥ –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ
    contractsSheet.setColumnWidth(5, 200);  // –î–∏—Ä–µ–∫—Ç–æ—Ä/–ö–µ—Ä—ñ–≤–Ω–∏–∫
    contractsSheet.setColumnWidth(6, 120);  // –Ñ–î–†–ü–û–£ –∑–∞–º–æ–≤–Ω–∏–∫–∞
    contractsSheet.setColumnWidth(7, 300);  // –û–ø–∏—Å
    contractsSheet.setColumnWidth(8, 120);  // –í–∞—Ä—Ç—ñ—Å—Ç—å
    contractsSheet.setColumnWidth(9, 200);  // –í–∏–∫–æ–Ω–∞–≤–µ—Ü—å
    contractsSheet.setColumnWidth(10, 300); // –ü–æ–≤–Ω–∞ –Ω–∞–∑–≤–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    contractsSheet.setColumnWidth(11, 120); // –Ñ–î–†–ü–û–£ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    contractsSheet.setColumnWidth(12, 400); // –ê–¥—Ä–µ—Å–∞ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    contractsSheet.setColumnWidth(13, 150); // –¢–∏–ø –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    contractsSheet.setColumnWidth(14, 150); // –¢–µ–ª–µ—Ñ–æ–Ω –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    contractsSheet.setColumnWidth(15, 200); // Email –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    contractsSheet.setColumnWidth(16, 400); // –ë–∞–Ω–∫—ñ–≤—Å—å–∫—ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏
    contractsSheet.setColumnWidth(17, 200); // –ö–µ—Ä—ñ–≤–Ω–∏–∫ –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    contractsSheet.setColumnWidth(18, 120); // –°—Ç–∞—Ç—É—Å
    contractsSheet.setColumnWidth(19, 300); // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞–ø–∫—É
    contractsSheet.setColumnWidth(20, 300); // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥–æ–≥–æ–≤—ñ—Ä
    contractsSheet.setColumnWidth(21, 120); // –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    
    Logger.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ');
    
  } catch (error) {
    Logger.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ:', error.toString());
    throw error;
  }
}

/**
 * –ü–æ–≤–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
 */
function initializeSystem() {
  Logger.log('=== –ü–û–í–ù–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –°–ò–°–¢–ï–ú–ò ===');
  
  try {
    // 1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤–∫–ª–∞–¥–∫—É –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤
    Logger.log('–ö—Ä–æ–∫ 1: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–∫–ª–∞–¥–∫–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤...');
    initializePerformersSheet();
    
    // 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤
    Logger.log('–ö—Ä–æ–∫ 2: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤...');
    initializeContractsSheet();
    
    // 3. –¢–µ—Å—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ —à–∞–±–ª–æ–Ω—ñ–≤
    Logger.log('–ö—Ä–æ–∫ 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —à–∞–±–ª–æ–Ω—ñ–≤...');
    testTemplateAccess();
    
    Logger.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!');
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é
    sendQuickTelegramMessage('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!\n\nüìã –í–∫–ª–∞–¥–∫–∞ "–í–∏–∫–æ–Ω–∞–≤—Ü—ñ" —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∑ –±–∞–∑–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏\nüìä –¢–∞–±–ª–∏—Ü—è –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–∞ –∑ –Ω–æ–≤–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏\nüìÑ –î–æ—Å—Ç—É–ø –¥–æ —à–∞–±–ª–æ–Ω—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ');
    
  } catch (error) {
    Logger.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏:', error.toString());
    sendQuickTelegramMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏:\n${error.toString()}`);
    throw error;
  }
}