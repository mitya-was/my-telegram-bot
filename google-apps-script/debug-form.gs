/**
 * –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∏
 */

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –¥–∞–Ω–∏—Ö –∑ —Ç–∞–±–ª–∏—Ü—ñ
 */
function debugLastFormData() {
  Logger.log('=== –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ò–• –§–û–†–ú–ò ===');
  
  try {
    const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getSheetByName(CONFIG.SHEETS.CONTRACTS);
    
    if (!sheet) {
      Logger.log('‚ùå –¢–∞–±–ª–∏—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!');
      return;
    }
    
    const lastRow = sheet.getLastRow();
    Logger.log('–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫:', lastRow);
    
    if (lastRow <= 1) {
      Logger.log('‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—ñ');
      return;
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    Logger.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ:', headers);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ –¥–∞–Ω–∏—Ö
    const lastRowData = sheet.getRange(lastRow, 1, 1, sheet.getLastColumn()).getValues()[0];
    Logger.log('–û—Å—Ç–∞–Ω–Ω—ñ –¥–∞–Ω—ñ:', lastRowData);
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å
    Logger.log('=== –í–Ü–î–ü–û–í–Ü–î–ù–Ü–°–¢–¨ –ó–ê–ì–û–õ–û–í–ö–Ü–í –¢–ê –î–ê–ù–ò–• ===');
    for (let i = 0; i < headers.length; i++) {
      Logger.log(`–ö–æ–ª–æ–Ω–∫–∞ ${i}: "${headers[i]}" = "${lastRowData[i]}"`);
    }
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Telegram –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
    let message = 'üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –§–û–†–ú–ò:\n\n';
    message += `üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${headers.length} –∫–æ–ª–æ–Ω–æ–∫\n`;
    message += `üìù –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫: ${lastRow}\n\n`;
    
    message += 'üìã –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–Ü:\n';
    for (let i = 0; i < Math.min(headers.length, 10); i++) {
      message += `${i}: "${headers[i]}" = "${lastRowData[i] || '–ø—É—Å—Ç–æ'}"\n`;
    }
    
    sendQuickTelegramMessage(message);
    
    return {
      headers: headers,
      lastRowData: lastRowData
    };
    
  } catch (error) {
    Logger.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error.toString());
    sendQuickTelegramMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ñ–æ—Ä–º–∏:\n${error.toString()}`);
  }
}

/**
 * –°–∏–º—É–ª—è—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ä–º–∏ –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
 */
function simulateFormSubmissionWithRealData() {
  Logger.log('=== –°–ò–ú–£–õ–Ø–¶–Ü–Ø –û–ë–†–û–ë–ö–ò –§–û–†–ú–ò ===');
  
  try {
    const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getSheetByName(CONFIG.SHEETS.CONTRACTS);
    const lastRow = sheet.getLastRow();
    
    if (lastRow <= 1) {
      Logger.log('‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó');
      return;
    }
    
    // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–∞–Ω—ñ
    const values = sheet.getRange(lastRow, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ mock event
    const mockEvent = {
      values: values
    };
    
    Logger.log('–°–∏–º—É–ª—é—î–º–æ onFormSubmit –∑ –¥–∞–Ω–∏–º–∏:', values);
    
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–±—Ä–æ–±–∫–∏
    onFormSubmit(mockEvent);
    
  } catch (error) {
    Logger.log('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—ó:', error.toString());
    sendQuickTelegramMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—ó:\n${error.toString()}`);
  }
}

/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –ø–∞—Ä—Å–∏–Ω–≥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∞–ª—å–Ω–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
 */
function generateCorrectParseFunction() {
  Logger.log('=== –ì–ï–ù–ï–†–ê–¶–Ü–Ø –ü–†–ê–í–ò–õ–¨–ù–û–á –§–£–ù–ö–¶–Ü–á –ü–ê–†–°–ò–ù–ì–£ ===');
  
  try {
    const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getSheetByName(CONFIG.SHEETS.CONTRACTS);
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    Logger.log('–ü–æ—Ç–æ—á–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –ø–æ–ª—ñ–≤
    const fieldMapping = {};
    
    for (let i = 0; i < headers.length; i++) {
      const header = headers[i].toLowerCase();
      
      if (header.includes('–∫–ª—ñ—î–Ω—Ç') || header.includes('client')) {
        fieldMapping.client = i;
      } else if (header.includes('—Å—É–º–∞') || header.includes('–≤–∞—Ä—Ç—ñ—Å—Ç—å') || header.includes('amount')) {
        fieldMapping.amount = i;
      } else if (header.includes('–¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å') || header.includes('activity')) {
        fieldMapping.activityType = i;
      } else if (header.includes('–¥–∏—Ä–µ–∫—Ç–æ—Ä') || header.includes('–∫–µ—Ä—ñ–≤–Ω–∏–∫') || header.includes('director')) {
        fieldMapping.director = i;
      } else if (header.includes('—î–¥—Ä–ø–æ—É') || header.includes('edrpou')) {
        fieldMapping.edrpou = i;
      } else if (header.includes('–æ–ø–∏—Å') || header.includes('description')) {
        fieldMapping.description = i;
      } else if (header.includes('–≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å') || header.includes('performer')) {
        fieldMapping.performer = i;
      } else if (header.includes('timestamp') || header.includes('—á–∞—Å')) {
        fieldMapping.timestamp = i;
      }
    }
    
    Logger.log('–ó–Ω–∞–π–¥–µ–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ:', fieldMapping);
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–¥ –Ω–æ–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
    let newParseCode = `
// –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –ó–ì–ï–ù–ï–†–û–í–ê–ù–ê –§–£–ù–ö–¶–Ü–Ø –ü–ê–†–°–ò–ù–ì–£
function parseFormData(e) {
  Logger.log('=== –ü–ê–†–°–ò–ù–ì –î–ê–ù–ò–• –§–û–†–ú–ò (–û–ù–û–í–õ–ï–ù–ò–ô) ===');
  
  if (!e || !e.values) {
    Logger.log('‚ùå –ù–µ–º–∞—î e.values');
    return {};
  }
  
  const values = e.values;
  Logger.log('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–∞—á–µ–Ω—å:', values.length);
  Logger.log('–í—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:', JSON.stringify(values));
  
  const result = {
    timestamp: values[${fieldMapping.timestamp || 0}] || new Date(),
    client: values[${fieldMapping.client || 1}] || '',
    activityType: values[${fieldMapping.activityType || 2}] || '',
    director: values[${fieldMapping.director || 3}] || '',
    edrpou: values[${fieldMapping.edrpou || 4}] || '',
    description: values[${fieldMapping.description || 5}] || '',
    amount: values[${fieldMapping.amount || 6}] || '',
    performer: values[${fieldMapping.performer || 7}] || ''
  };
  
  Logger.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥—É:', JSON.stringify(result));
  return result;
}`;
    
    Logger.log('–ù–û–í–ò–ô –ö–û–î –§–£–ù–ö–¶–Ü–á –ü–ê–†–°–ò–ù–ì–£:');
    Logger.log(newParseCode);
    
    sendQuickTelegramMessage(`üîß –ó–ì–ï–ù–ï–†–û–í–ê–ù–û –ù–û–í–£ –§–£–ù–ö–¶–Ü–Æ –ü–ê–†–°–ò–ù–ì–£:\n\n–ó–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–ª—è:\n${JSON.stringify(fieldMapping, null, 2)}\n\n–°–∫–æ–ø—ñ—é–π—Ç–µ –Ω–æ–≤–∏–π –∫–æ–¥ –∑ –ª–æ–≥—ñ–≤ Google Apps Script!`);
    
    return {
      fieldMapping: fieldMapping,
      newParseCode: newParseCode
    };
    
  } catch (error) {
    Logger.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:', error.toString());
    sendQuickTelegramMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:\n${error.toString()}`);
  }
}