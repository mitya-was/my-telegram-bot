/**
 * –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –§–û–†–ú–´
 * –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV
 */

/**
 * –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function analyzeRealFormStructure() {
  Logger.log('=== –ê–ù–ê–õ–Ü–ó –†–ï–ê–õ–¨–ù–û–á –°–¢–†–£–ö–¢–£–†–ò –§–û–†–ú–ò ===');
  
  try {
    const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getSheetByName(CONFIG.SHEETS.CONTRACTS);
    
    if (!sheet || sheet.getLastRow() <= 1) {
      Logger.log('‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É');
      return null;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const dataRow = sheet.getRange(2, 1, 1, sheet.getLastColumn()).getValues()[0];
    
    Logger.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
    Logger.log('–î–∞–Ω—ñ –∑ –¥—Ä—É–≥–æ–≥–æ —Ä—è–¥–∫–∞:', dataRow);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–¥–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    let realDataStart = -1;
    let foundFields = {};
    
    for (let i = 0; i < dataRow.length; i++) {
      const value = dataRow[i];
      const header = headers[i];
      
      if (value && value.toString().trim() !== '') {
        if (realDataStart === -1) {
          realDataStart = i;
          Logger.log(`–†–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ –∫–æ–ª–æ–Ω–∫–∏ ${String.fromCharCode(65 + i)} (—ñ–Ω–¥–µ–∫—Å ${i})`);
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–æ–ª—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
        const valueStr = value.toString().toLowerCase();
        
        if (valueStr.includes('—Ç–æ–≤') || valueStr.includes('—Ñ–æ–ø') || valueStr.includes('–ø–ø')) {
          foundFields.clientTaxType = i;
        } else if (/^\d{8,10}$/.test(valueStr)) {
          foundFields.clientEdrpou = i;
        } else if (/^\d+$/.test(valueStr) && valueStr.length >= 3) {
          if (!foundFields.amount) foundFields.amount = i;
        } else if (valueStr === '–≥—Ä–Ω' || valueStr === 'usd' || valueStr === 'eur') {
          foundFields.currency = i;
        }
        
        Logger.log(`–ö–æ–ª–æ–Ω–∫–∞ ${String.fromCharCode(65 + i)} (${i}): "${header}" = "${value}"`);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    const suggestedMapping = {
      timestamp: 1, // –û–±—ã—á–Ω–æ timestamp –≤ –∫–æ–ª–æ–Ω–∫–µ B
      realDataStart: realDataStart,
      foundFields: foundFields
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram
    let message = 'üîç –ê–ù–ê–õ–Ü–ó –°–¢–†–£–ö–¢–£–†–ò –§–û–†–ú–ò:\n\n';
    message += `üìä –í—Å—å–æ–≥–æ –∫–æ–ª–æ–Ω–æ–∫: ${headers.length}\n`;
    message += `üéØ –†–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ –∫–æ–ª–æ–Ω–∫–∏: ${String.fromCharCode(65 + realDataStart)} (—ñ–Ω–¥–µ–∫—Å ${realDataStart})\n\n`;
    
    message += 'üìã –ó–ù–ê–ô–î–ï–ù–Ü –ü–û–õ–Ø:\n';
    for (const [field, index] of Object.entries(foundFields)) {
      message += `‚Ä¢ ${field}: –∫–æ–ª–æ–Ω–∫–∞ ${String.fromCharCode(65 + index)} (${index}) = "${dataRow[index]}"\n`;
    }
    
    message += '\nüîß –ü–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é!';
    
    sendQuickTelegramMessage(message);
    
    return suggestedMapping;
    
  } catch (error) {
    Logger.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É:', error.toString());
    sendQuickTelegramMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏:\n${error.toString()}`);
    return null;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
 */
function generateCorrectConfig() {
  Logger.log('=== –ì–ï–ù–ï–†–ê–¶–Ü–Ø –ü–†–ê–í–ò–õ–¨–ù–û–á –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á ===');
  
  const analysis = analyzeRealFormStructure();
  if (!analysis) return;
  
  const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getSheetByName(CONFIG.SHEETS.CONTRACTS);
  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  const dataRow = sheet.getRange(2, 1, 1, sheet.getLastColumn()).getValues()[0];
  
  // –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ CSV —Å–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  let configCode = `
// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
const CONFIG_CORRECTED = {
  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ...
  
  FORM_FIELDS: {`;
  
  let fieldIndex = analysis.realDataStart;
  const fieldNames = [
    'CLIENT_NAME',
    'CLIENT_TAX_TYPE', 
    'CLIENT_DIRECTOR',
    'CLIENT_ADDRESS',
    'CLIENT_EDRPOU',
    'CLIENT_BANK_ACCOUNT',
    'CLIENT_BANK_NAME',
    'CLIENT_BANK_MFO',
    'DESCRIPTION',
    'PERIOD_START',
    'PERIOD_END',
    'AMOUNT',
    'CURRENCY',
    'PAYMENT_TERM',
    'PERFORMER_NAME'
  ];
  
  for (let i = 0; i < fieldNames.length && (fieldIndex + i) < dataRow.length; i++) {
    const currentIndex = fieldIndex + i;
    const value = dataRow[currentIndex];
    const fieldName = fieldNames[i];
    
    configCode += `
    ${fieldName}: ${currentIndex}, // ${String.fromCharCode(65 + currentIndex)} - "${value}"`;
  }
  
  configCode += `
  }
};

// –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–ê–†–°–ò–ù–ì–ê
function parseFormDataCorrected(e) {
  if (!e || !e.values) return {};
  
  const values = e.values;
  
  return {
    timestamp: values[1] || new Date(),`;
  
  for (let i = 0; i < fieldNames.length && (fieldIndex + i) < dataRow.length; i++) {
    const currentIndex = fieldIndex + i;
    const fieldName = fieldNames[i].toLowerCase().replace('client_', 'client').replace('_', '');
    
    if (fieldName === 'clientname') configCode += `
    clientName: values[${currentIndex}] || '',`;
    else if (fieldName === 'amount') configCode += `
    amount: values[${currentIndex}] || '',`;
    else if (fieldName === 'performername') configCode += `
    performer: values[${currentIndex}] || '',`;
  }
  
  configCode += `
  };
}`;
  
  Logger.log('–ó–ì–ï–ù–ï–†–û–í–ê–ù–ò–ô –ö–û–î –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á:');
  Logger.log(configCode);
  
  sendQuickTelegramMessage('üîß –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ Google Apps Script.');
  
  return configCode;
}

/**
 * –ë—ã—Å—Ç—Ä–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ CSV –¥–∞–Ω–Ω—ã—Ö
 */
function quickFixConfig() {
  Logger.log('=== –®–í–ò–î–ö–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á ===');
  
  // –ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ CSV —Ñ–∞–π–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const FIXED_FORM_FIELDS = {
    TIMESTAMP: 1,           // B - 06.08.2025 21:34:53
    CLIENT_NAME: 16,        // Q - –º–æ–∫–∫–æ
    CLIENT_TAX_TYPE: 17,    // R - –¢–û–í
    CLIENT_DIRECTOR: 18,    // S - –ü–µ—Ç—è
    CLIENT_ADDRESS: 19,     // T - –æ–∏–º–ª–æ—É–∫
    CLIENT_EDRPOU: 20,      // U - 324234
    CLIENT_BANK_ACCOUNT: 21,// V - –≤–∞–∏–º—É–µ–∫
    CLIENT_BANK_NAME: 22,   // W - —É—Ü–∫–º5—É–∫
    CLIENT_BANK_MFO: 23,    // X - 23432
    DESCRIPTION: 24,        // Y - –µ–º—É—Ü–∫–∏
    PERIOD_START: 27,       // BB - 10.10.2025 (–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–∏–æ–¥)
    PERIOD_END: 28,         // CC - 11.11.2026 (–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–∏–æ–¥)
    AMOUNT: 29,             // DD - 12444 (–≤–æ–∑–º–æ–∂–Ω–æ —Å—É–º–º–∞)
    CURRENCY: 30,           // EE - –≥—Ä–Ω
    PAYMENT_TERM: 31,       // FF - 10.02.2025 (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ—Ä–º–∏–Ω)
    PERFORMER_NAME: 32      // GG - Web Studio Pro
  };
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  CONFIG.FORM_FIELDS = FIXED_FORM_FIELDS;
  
  Logger.log('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ');
  sendQuickTelegramMessage('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —à–≤–∏–¥–∫–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ —Ç–µ—Å—Ç—É–≤–∞—Ç–∏.');
  
  return FIXED_FORM_FIELDS;
}

/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
function testCorrectedConfig() {
  Logger.log('=== –¢–ï–°–¢ –í–ò–ü–†–ê–í–õ–ï–ù–û–á –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á ===');
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  quickFixConfig();
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const mockEvent = {
    values: [
      '', // A
      '06.08.2025 21:34:53', // B - timestamp
      '', '', '', '', '', '', '', '', '', '', '', '', '', '', // C-P –ø—É—Å—Ç—ã–µ
      '–º–æ–∫–∫–æ', // Q (16) - CLIENT_NAME
      '–¢–û–í', // R (17) - CLIENT_TAX_TYPE
      '–ü–µ—Ç—è', // S (18) - CLIENT_DIRECTOR
      '–æ–∏–º–ª–æ—É–∫', // T (19) - CLIENT_ADDRESS
      '324234', // U (20) - CLIENT_EDRPOU
      '–≤–∞–∏–º—É–µ–∫', // V (21) - CLIENT_BANK_ACCOUNT
      '—É—Ü–∫–º5—É–∫', // W (22) - CLIENT_BANK_NAME
      '23432', // X (23) - CLIENT_BANK_MFO
      '–µ–º—É—Ü–∫–∏', // Y (24) - DESCRIPTION
      '', '', // Z, AA –ø—É—Å—Ç—ã–µ
      '10.10.2025', // BB (27) - PERIOD_START
      '11.11.2026', // CC (28) - PERIOD_END
      '12444', // DD (29) - AMOUNT
      '–≥—Ä–Ω', // EE (30) - CURRENCY
      '10.02.2025', // FF (31) - PAYMENT_TERM
      'Web Studio Pro' // GG (32) - PERFORMER_NAME
    ]
  };
  
  const result = parseFormData(mockEvent);
  
  Logger.log('=== –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø ===');
  Logger.log('–ö–ª—ñ—î–Ω—Ç:', result.clientName);
  Logger.log('–°—É–º–∞:', result.amount);
  Logger.log('–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å:', result.performer);
  
  const success = result.clientName && result.amount && result.performer;
  
  let message = `üß™ –¢–ï–°–¢ –í–ò–ü–†–ê–í–õ–ï–ù–û–á –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á:\n\n`;
  message += `–ö–ª—ñ—î–Ω—Ç: "${result.clientName || '–ü–£–°–¢–û'}"\n`;
  message += `–°—É–º–∞: "${result.amount || '–ü–£–°–¢–û'}"\n`;
  message += `–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: "${result.performer || '–ü–£–°–¢–û'}"\n\n`;
  message += success ? '‚úÖ –¢–ï–°–¢ –ü–†–û–ô–®–û–í!' : '‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–®–û–í!';
  
  sendQuickTelegramMessage(message);
  
  return success;
}